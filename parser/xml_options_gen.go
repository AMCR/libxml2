// Auto-generated by internal/cmd/genoptions/genoptions.go -- DO NOT EDIT!
package parser

import "github.com/lestrrat-go/option"

type XMLParseOption interface {
	option.Interface
	xmlParseOption()
}

type nativeXMLParseOption struct {
	option.Interface
	enabled bool
}

func (*nativeXMLParseOption) xmlParseOption() {}
func (o *nativeXMLParseOption) Enabled() bool {
	return o.enabled
}

type optkeyWithXMLParseRecover struct{}
type optkeyWithXMLParseNoEnt struct{}
type optkeyWithXMLParseDTDLoad struct{}
type optkeyWithXMLParseDTDAttr struct{}
type optkeyWithXMLParseDTDValid struct{}
type optkeyWithXMLParseNoError struct{}
type optkeyWithXMLParseNoWarning struct{}
type optkeyWithXMLParsePedantic struct{}
type optkeyWithXMLParseNoBlanks struct{}
type optkeyWithXMLParseSAX1 struct{}
type optkeyWithXMLParseXInclude struct{}
type optkeyWithXMLParseNoNet struct{}
type optkeyWithXMLParseNoDict struct{}
type optkeyWithXMLParseNsclean struct{}
type optkeyWithXMLParseNoCDATA struct{}
type optkeyWithXMLParseNoXIncNode struct{}
type optkeyWithXMLParseCompact struct{}
type optkeyWithXMLParseOld10 struct{}
type optkeyWithXMLParseNoBaseFix struct{}
type optkeyWithXMLParseHuge struct{}
type optkeyWithXMLParseOldSAX struct{}
type optkeyWithXMLParseIgnoreEnc struct{}
type optkeyWithXMLParseBigLines struct{}

// actual values for each of the flags
const (
	optvalWithXMLParseRecover = iota << 1
	optvalWithXMLParseNoEnt
	optvalWithXMLParseDTDLoad
	optvalWithXMLParseDTDAttr
	optvalWithXMLParseDTDValid
	optvalWithXMLParseNoError
	optvalWithXMLParseNoWarning
	optvalWithXMLParsePedantic
	optvalWithXMLParseNoBlanks
	optvalWithXMLParseSAX1
	optvalWithXMLParseXInclude
	optvalWithXMLParseNoNet
	optvalWithXMLParseNoDict
	optvalWithXMLParseNsclean
	optvalWithXMLParseNoCDATA
	optvalWithXMLParseNoXIncNode
	optvalWithXMLParseCompact
	optvalWithXMLParseOld10
	optvalWithXMLParseNoBaseFix
	optvalWithXMLParseHuge
	optvalWithXMLParseOldSAX
	optvalWithXMLParseIgnoreEnc
	optvalWithXMLParseBigLines
)
const defaultXMLParseFlag = 0

// WithXMLParseRecover specifies if the parser should recover on errors
func WithXMLParseRecover(b bool) XMLParseOption {
	return &nativeXMLParseOption{
		enabled:   b,
		Interface: option.New(optkeyWithXMLParseRecover{}, optvalWithXMLParseRecover),
	}
}

// WithXMLParseNoEnt specifies if the parser should substitute entities
func WithXMLParseNoEnt(b bool) XMLParseOption {
	return &nativeXMLParseOption{
		enabled:   b,
		Interface: option.New(optkeyWithXMLParseNoEnt{}, optvalWithXMLParseNoEnt),
	}
}

// WithXMLParseDTDLoad specifies if the parser should load the external subset
func WithXMLParseDTDLoad(b bool) XMLParseOption {
	return &nativeXMLParseOption{
		enabled:   b,
		Interface: option.New(optkeyWithXMLParseDTDLoad{}, optvalWithXMLParseDTDLoad),
	}
}

// WithXMLParseDTDAttr specifies if the parser should use default DTD attributes
func WithXMLParseDTDAttr(b bool) XMLParseOption {
	return &nativeXMLParseOption{
		enabled:   b,
		Interface: option.New(optkeyWithXMLParseDTDAttr{}, optvalWithXMLParseDTDAttr),
	}
}

// WithXMLParseDTDValid specifies if the parser should validate with the DTD
func WithXMLParseDTDValid(b bool) XMLParseOption {
	return &nativeXMLParseOption{
		enabled:   b,
		Interface: option.New(optkeyWithXMLParseDTDValid{}, optvalWithXMLParseDTDValid),
	}
}

// WithXMLParseNoError specifies if the parser should suppress error reports
func WithXMLParseNoError(b bool) XMLParseOption {
	return &nativeXMLParseOption{
		enabled:   b,
		Interface: option.New(optkeyWithXMLParseNoError{}, optvalWithXMLParseNoError),
	}
}

// WithXMLParseNoWarning specifies if the parser should suppress warning reports
func WithXMLParseNoWarning(b bool) XMLParseOption {
	return &nativeXMLParseOption{
		enabled:   b,
		Interface: option.New(optkeyWithXMLParseNoWarning{}, optvalWithXMLParseNoWarning),
	}
}

// WithXMLParsePedantic specifies if the parser should use pedantic error reporting
func WithXMLParsePedantic(b bool) XMLParseOption {
	return &nativeXMLParseOption{
		enabled:   b,
		Interface: option.New(optkeyWithXMLParsePedantic{}, optvalWithXMLParsePedantic),
	}
}

// WithXMLParseNoBlanks specifies if the parser should remove blank nodes
func WithXMLParseNoBlanks(b bool) XMLParseOption {
	return &nativeXMLParseOption{
		enabled:   b,
		Interface: option.New(optkeyWithXMLParseNoBlanks{}, optvalWithXMLParseNoBlanks),
	}
}

// WithXMLParseSAX1 specifies if the parser should use the SAX1 interface internally
func WithXMLParseSAX1(b bool) XMLParseOption {
	return &nativeXMLParseOption{
		enabled:   b,
		Interface: option.New(optkeyWithXMLParseSAX1{}, optvalWithXMLParseSAX1),
	}
}

// WithXMLParseXInclude specifies if the parser should implement XInclude substitution
func WithXMLParseXInclude(b bool) XMLParseOption {
	return &nativeXMLParseOption{
		enabled:   b,
		Interface: option.New(optkeyWithXMLParseXInclude{}, optvalWithXMLParseXInclude),
	}
}

// WithXMLParseNoNet specifies if the parser should forbid network access
func WithXMLParseNoNet(b bool) XMLParseOption {
	return &nativeXMLParseOption{
		enabled:   b,
		Interface: option.New(optkeyWithXMLParseNoNet{}, optvalWithXMLParseNoNet),
	}
}

// WithXMLParseNoDict specifies if the parser should avoid reusing the context dictionary
func WithXMLParseNoDict(b bool) XMLParseOption {
	return &nativeXMLParseOption{
		enabled:   b,
		Interface: option.New(optkeyWithXMLParseNoDict{}, optvalWithXMLParseNoDict),
	}
}

// WithXMLParseNsclean specifies if the parser should remove redundant namespace declarations
func WithXMLParseNsclean(b bool) XMLParseOption {
	return &nativeXMLParseOption{
		enabled:   b,
		Interface: option.New(optkeyWithXMLParseNsclean{}, optvalWithXMLParseNsclean),
	}
}

// WithXMLParseNoCDATA specifies if the parser should merge CDATA as text nodes
func WithXMLParseNoCDATA(b bool) XMLParseOption {
	return &nativeXMLParseOption{
		enabled:   b,
		Interface: option.New(optkeyWithXMLParseNoCDATA{}, optvalWithXMLParseNoCDATA),
	}
}

// WithXMLParseNoXIncNode specifies if the parser should avoid generating XINCLUDE START/END nodes
func WithXMLParseNoXIncNode(b bool) XMLParseOption {
	return &nativeXMLParseOption{
		enabled:   b,
		Interface: option.New(optkeyWithXMLParseNoXIncNode{}, optvalWithXMLParseNoXIncNode),
	}
}

// WithXMLParseCompact specifies if the parser should compact small text nodes; no modification of the tree allowed afterwards (will possibly crash if you try to modify the tree)
func WithXMLParseCompact(b bool) XMLParseOption {
	return &nativeXMLParseOption{
		enabled:   b,
		Interface: option.New(optkeyWithXMLParseCompact{}, optvalWithXMLParseCompact),
	}
}

// WithXMLParseOld10 specifies if the parser should parse using XML-1.0 before update 5
func WithXMLParseOld10(b bool) XMLParseOption {
	return &nativeXMLParseOption{
		enabled:   b,
		Interface: option.New(optkeyWithXMLParseOld10{}, optvalWithXMLParseOld10),
	}
}

// WithXMLParseNoBaseFix specifies if the parser should avoid fixing up XINCLUDE xml:base uris
func WithXMLParseNoBaseFix(b bool) XMLParseOption {
	return &nativeXMLParseOption{
		enabled:   b,
		Interface: option.New(optkeyWithXMLParseNoBaseFix{}, optvalWithXMLParseNoBaseFix),
	}
}

// WithXMLParseHuge specifies if the parser should relax any hrdcoded limit from the parser
func WithXMLParseHuge(b bool) XMLParseOption {
	return &nativeXMLParseOption{
		enabled:   b,
		Interface: option.New(optkeyWithXMLParseHuge{}, optvalWithXMLParseHuge),
	}
}

// WithXMLParseOldSAX specifies if the parser should parse using SAX2 interface before 2.7.0
func WithXMLParseOldSAX(b bool) XMLParseOption {
	return &nativeXMLParseOption{
		enabled:   b,
		Interface: option.New(optkeyWithXMLParseOldSAX{}, optvalWithXMLParseOldSAX),
	}
}

// WithXMLParseIgnoreEnc specifies if the parser should ignore internal document encoding hints
func WithXMLParseIgnoreEnc(b bool) XMLParseOption {
	return &nativeXMLParseOption{
		enabled:   b,
		Interface: option.New(optkeyWithXMLParseIgnoreEnc{}, optvalWithXMLParseIgnoreEnc),
	}
}

// WithXMLParseBigLines specifies if the parser should store big line numbers in text PSVI field
func WithXMLParseBigLines(b bool) XMLParseOption {
	return &nativeXMLParseOption{
		enabled:   b,
		Interface: option.New(optkeyWithXMLParseBigLines{}, optvalWithXMLParseBigLines),
	}
}

func XMLOptionsToFlag(options ...XMLParseOption) int {
	flag := defaultXMLParseFlag
	for _, rawopt := range options {
		option, ok := rawopt.(*nativeXMLParseOption)
		if !ok {
			continue
		}
		if option.Enabled() {
			flag |= option.Value().(int)
		} else {
			flag &= ^(option.Value().(int))
		}
	}
	return flag
}
